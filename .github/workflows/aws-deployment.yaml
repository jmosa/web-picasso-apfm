name: AWS Deployment

on:
  push:
    branches: [ develop, master ] # run once when pushing commits to these branches
    tags-ignore:
      - '**' # but don't run when pushing only tags to these branches, whether manually or as a release
  release:
    types: [ published ] # run once when release is published

jobs:

  build:
    name: 'Build: Run Docker Build and Push to ECR'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Configure APFM Environment'
      id: apfm-env
      uses: invisionapp/private-action-loader@v3
      with:
        pal-repo-token: ${{ secrets.APFMOPS_ACCESS_TOKEN }}
        pal-repo-name: aplaceformom/devops-github-actions
        pal-action-directory: apfm-env

    - name: 'Checkout Source'
      uses: actions/checkout@v2

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: 'Login to Amazon ECR'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-docker-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry  }}
      run: |
        docker build --build-arg environment -t $ECR_REGISTRY/${repo}:${docker_tag} .
        docker push $ECR_REGISTRY/${repo}:${docker_tag}
        
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: 'Upload Terraform project parameters'
      uses: actions/upload-artifact@v1
      with:
        name: terraform.yaml
        path: .

  deploy:
    needs: build
    name: 'Deploy: Apply Terraform Plan'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Configure APFM Environment'
      id: apfm-env
      uses: invisionapp/private-action-loader@v3
      with:
        pal-repo-token: ${{ secrets.APFMOPS_ACCESS_TOKEN }}
        pal-repo-name: aplaceformom/devops-github-actions
        pal-action-directory: apfm-env
        
    - name: 'Checkout Deployment Orchestration'
      uses: actions/checkout@v2
      with:
        repository: aplaceformom/techops-terraform-deploy
        submodules: true
        token: ${{ secrets.APFMOPS_ACCESS_TOKEN }}

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.24
        tf_actions_subcommand: init
        tf_actions_working_dir: '.'
        tf_actions_comment: true

    - name: 'Generate Terraform remote state config'
      run: |
        echo "$terraform_tf" > terraform.tf

    - name: 'Terraform Init (reconfigure)'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.24
        tf_actions_subcommand: init
        tf_actions_working_dir: '.'
        tf_actions_comment: true
      env:
        TF_CLI_ARGS: -reconfigure

    - name: 'Download Terraform project parameters'
      uses: actions/download-artifact@v1
      with:
        name: terraform.yaml
        path: .

    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.24
        tf_actions_subcommand: plan
        tf_actions_working_dir: '.'
        tf_actions_comment: true

    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.24
        tf_actions_subcommand: apply
        tf_actions_working_dir: '.'
        tf_actions_comment: true
      env:
        TF_CLI_ARGS: -var deploy=true
